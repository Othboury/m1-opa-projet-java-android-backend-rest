package com.example.rest;
import com.example.rest.models.UserRepository;
import org.glassfish.grizzly.http.server.HttpServer;
import org.glassfish.grizzly.http.server.NetworkListener;
import org.glassfish.grizzly.http2.Http2AddOn;
import org.glassfish.grizzly.http2.Http2Configuration;
import org.glassfish.grizzly.ssl.SSLContextConfigurator;
import org.glassfish.grizzly.ssl.SSLEngineConfigurator;
import org.glassfish.jersey.grizzly2.httpserver.GrizzlyHttpServerFactory;
import org.glassfish.jersey.server.ResourceConfig;

import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.NoSuchAlgorithmException;
import java.security.spec.InvalidKeySpecException;

/**
 * Main class.
 *
 */
public class Main {
    // Base URI the Grizzly HTTP server will listen on
    public static final String BASE_URI = "http://0.0.0.0:8091/";
    /**
     * Starts Grizzly HTTP server exposing JAX-RS resources defined in this application.
     * @return Grizzly HTTP server.
     */
    public static HttpServer startServer() {
        // create a resource config that scans for JAX-RS resources and providers
        // in com.example.rest package
        final ResourceConfig rc = new ResourceConfig().packages("com.example.rest" , "com.example.rest.services");
        // create and start a new instance of grizzly http server
        // exposing the Jersey application at BASE_URI
        return GrizzlyHttpServerFactory.createHttpServer(URI.create(BASE_URI),rc);
    }
    /**
     * Main method.
     * @param args
     * @throws IOException
     */
    public static void main(String[] args) throws IOException, NoSuchAlgorithmException, InvalidKeySpecException {

UserRepository userRepository = UserRepository.getInstance();

userRepository.init();

        /*System.out.println(bibliothequeDaoRepositoryJPA.serachInCategory("" +
                "%a%"));
*/
        final HttpServer server = startServer();
        addTLSandHTTP2(server);
        System.out.println(String.format("Jersey app started with WADL available at "
                + "%sapplication.wadl\nHit enter to stop it...", BASE_URI));
        System.in.read();
        server.stop();
    }


    public static HttpServer addTLSandHTTP2(HttpServer httpServer) throws IOException {
        NetworkListener listener =
                new NetworkListener("TLS",
                        NetworkListener.DEFAULT_NETWORK_HOST,
                        4433);
        listener.setSecure(true);

        // We add the certificate stored in a java keystore in src/main/resources/ssl
        // By default a self signed certificate is generated by maven (see pom.xml)

        byte[] bytes = Files.readAllBytes(Paths.get("src/main/resources/ssl/cert.jks"));


        SSLContextConfigurator sslContextConfigurator = new SSLContextConfigurator();
        sslContextConfigurator.setKeyStoreBytes(bytes);
        sslContextConfigurator.setKeyStorePass("storepass");


        listener.setSSLEngineConfig(new SSLEngineConfigurator(sslContextConfigurator, false, false, false));

        // Create default HTTP/2 configuration and provide it to the AddOn
        Http2Configuration configuration = Http2Configuration.builder().build();
        Http2AddOn http2Addon = new Http2AddOn(configuration);

        // Register the Addon.
        listener.registerAddOn(http2Addon);
        httpServer.addListener(listener);

        return httpServer;
    }
}